set nocompatible

call pathogen#infect()
set wildignore+=*/tmp*,*.swp,*.zip,*.html,coverage/*,public/*,node_modules/*,node_modules,venv/*,venv,*.pyc,*/*.pyc
let NERDTreeIgnore = ['\.pyc$']

filetype on
filetype indent on
filetype plugin indent on

let mapleader=','

syntax enable

set clipboard=unnamed  " Yanks go on clipboard instead. 
set history=4096  " Number of things to remember in history. 
set autowrite  " Writes on make/shell commands 
set modelines=0
set nonumber
set wrap
set timeoutlen=250  " Time to wait after ESC (default causes an annoying delay)       
set mouse=a
set tabstop=2
set softtabstop=2
set backspace=2  " Backspace over everything in insert mode 
set shiftwidth=2  " Tabs under smart indent 
set smarttab 
set expandtab 
set cindent 
set autoindent 
set scrolloff=3

set showcmd
set nocp incsearch 
set gdefault " global replacement
set cinoptions=:0,p0,t0 
set formatoptions=tcqr 

"Search
set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
nnoremap / /\v\c
vnoremap / /\v\c
nnoremap <tab> %
vnoremap <tab> %

" Visual 
set showmatch  " Show matching brackets. 
set matchtime=5  " Bracket blinking. 
set novisualbell  " No blinking . 
set laststatus=2  " Always show status line. 

" Backups
set backup                     " Enable creation of backup file.
set backupdir=/tmp " Where backups will go.
set directory=/tmp     " Where temporary files will go.

" split pane settings
set noequalalways

" vim rc edit/reload
nnoremap <leader>ev <C-w><C-v><C-l>:edit $MYVIMRC<cr>
nnoremap <leader>rv :source $MYVIMRC<cr>

" Custom leader commands
nnoremap <leader><space> :noh<CR>
nnoremap <leader>gb :!git blame %<CR>
nnoremap <leader>j :tabprevious<CR>
nnoremap <leader>k :tabnext<CR>
nnoremap <leader>nt :tabnew<CR>
nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>s <C-w>s<C-w>l
nnoremap gt :NERDTreeToggle<CR><CR>
nnoremap <leader>f :NERDTreeFind<CR>
nnoremap <leader>p :CommandT<CR>
nnoremap <leader>r :%s/
nnoremap <leader>n  <C-w>s<C-w>l :enew<CR>
nnoremap <leader>c :Scratch<CR>
inoremap jj <ESC>

"Unite
let g:unite_source_history_yank_enable = 1
let g:unite_source_rec_async_command= 'ag --nocolor --nogroup -g  ""'
let g:unite_source_grep_command = 'ag'
let g:unite_source_grep_default_opts = '--line-numbers --nocolor --nogroup --hidden'
call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#custom#source('file_rec/async', 'ignore_pattern', '\(node_modules/\|venv/\)')
nnoremap <C-p> :<C-u>Unite -buffer-name=files -start-insert file_rec/async:!<cr>
nnoremap <C-b> :<C-u>Unite -buffer-name=mru -start-insert file_mru<cr>
nnoremap <C-o> :<C-u>Unite  -buffer-name=outline outline<cr>
nnoremap <leader>a :Unite grep:.<CR>
nnoremap <leader>u :UniteResume<CR>

" Custom mappings for the unite buffer
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  " Play nice with supertab
  let b:SuperTabDisabled=1
  " Enable navigation with control-j and control-k in insert mode
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
endfunction

"Keymappings
nnoremap j gj
nnoremap k gk

" Toggle buffers, replaces C-6 on Terminal.app
nnoremap <leader>t :e #<CR>

" Yank file
nnoremap yf mwggyG`w

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

nnoremap <leader>d "ld
nnoremap <leader>D "lD
vnoremap <leader>d "ld

" Make Y behave like other capitals
map Y y$

" quick command line
nnoremap ; :
nmap <CR> :write<CR>

nnoremap <F3> :set invpaste paste?<CR>
set pastetoggle=<F3>

" tabbing
nnoremap <leader>nt :tabnew<CR>
nnoremap <leader>h :tabprevious<CR>
nnoremap <leader>l :tabnext<CR>

" expand active buffer in all directions (farks up nodetree)
let g:window_expanded="no"
function! ToggleExpandWindow()
    if (g:window_expanded=="no")
        let g:window_expanded="yes"
        wincmd |
        wincmd _
    else
        let g:window_expanded="no"
        wincmd =
    endif
endfunction
nnoremap <leader>e :call ToggleExpandWindow()<CR>

" json syntax highlighting
autocmd BufNewFile,BufRead *.json set ft=javascript

if has('gui_running')
    set transparency=5
endif

" background
colorscheme solarized 
set t_Co=256 " set 256 colors
set background=light
let g:solarized_style="light"
function! ToggleBackground()
    if (g:solarized_style=="dark")
        let g:solarized_style="light"
        set background=light
    else
        let g:solarized_style="dark"
        set background=dark
    endif
endfunction
command! Togbg call ToggleBackground()
nnoremap <F5> :call ToggleBackground()<CR>
inoremap <F5> <ESC>:call ToggleBackground()<CR>a
vnoremap <F5> <ESC>:call ToggleBackground()<CR>v

nnoremap <C-f> :%!jq '.'<CR>


" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! %!sudo tee > /dev/null %
